(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[157],{24352:(e,t,a)=>{Promise.resolve().then(a.bind(a,18033))},18033:(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>i});var n=a(95155);a(12115);var r=a(67396),s=a(91922);let o=[{language:"javascript",code:'// /app/models/User.js\nimport mongoose from "mongoose";\nimport { Schema,model } from "mongoose";\n\n\nconst formdataSchema = new Schema({\n    UserName: { type: String},\n    Name:{type: String},\n    email: { type: String },\n    // you can add more..\n    createdAt: { type: Date, default: Date.now },\n    updatedAt: { type: Date, default: Date.now },\n  });\n  \n  export default mongoose.models.User || model("User", formdataSchema);\n  \n'}],l=[{language:"javascript ,html, tailwindcss",code:'// /app/AddUser/page.js\n"use client"\nimport React from "react";\nimport { submitEvent } from "@/actions/UserAction";\n\nconst AddUser = () => {\n\n    const handleSubmit = async (formData) => {\n        try {\n          const response = await submitEvent({\n            UserName: formData.get("UserName"),\n            Name: formData.get("Name"),\n            email: formData.get("email"),  \n          });\n        } catch (error) {\n          console.log("Error:", error);\n        }\n      alert("User detail Added Successfully")\n    };\n  \n    return (\n      <>\n  <div className="p-8 rounded border w-[80%] pt-20 pb-40 mx-auto  border-gray-200">\n          <h1 className="font-medium text-2xl sm:text-3xl">Add User Details</h1>\n          <form action={handleSubmit}>\n            <div className="mt-6 gap-4">\n              <div>\n                <label htmlFor="UserName" className="text-sm  text-gray-900 sm:text-xl block mb-1 font-medium">User Name</label>\n                <input type="text" name="UserName" id="UserName" className="bg-gray-100 border border-gray-200 rounded py-3 px-3 block focus:ring-blue-500 focus:border-blue-500 text-gray-900 sm:text-xl w-full" placeholder="Enter User Name" />\n              </div>\n              <div>\n                <label htmlFor="Name" className="text-sm  text-gray-900 sm:text-xl block mb-1 font-medium">Name</label>\n                <input type="text" name="Name" id="Name" className="bg-gray-100 border border-gray-200 rounded py-3 px-3 block focus:ring-blue-500 focus:border-blue-500 text-gray-900 sm:text-xl w-full" placeholder="Enter Name" />\n              </div>\n              <div>\n                <label htmlFor="email" className="text-sm  text-gray-900 sm:text-xl block mb-1 font-medium">User email</label>\n                <input type="email" name="email" id="email" className="bg-gray-100 border border-gray-200 rounded py-3 px-3 block focus:ring-blue-500 focus:border-blue-500 text-gray-900 sm:text-xl w-full" placeholder="Enter User email" />\n              </div>\n            </div>\n            <div className="space-x-4 mt-8">\n              <button type="submit" className="sm:py-4 sm:px-10 text-lg py-2 px-4 bg-blue-500 text-white rounded hover:bg-blue-600 active:bg-blue-700 disabled:opacity-50">Save</button>\n            </div>\n          </form>\n        </div>\n      </>\n    )\n}\n\nexport default AddUser'}],d=[{language:"javascript",code:'// /app/actions/UserAction.js\n"use server"\nimport connectDB from "@/db/connectDB"\nimport User from "@/app/models/User"\n\nexport const submitEvent = async (data) => {\n    try {\n      await connectDB();\n      const newUser = await User.create(data);\n      return { status: "OK", message: "User data added Successfully" };\n    } catch (error) {\n      return { status: "Error", message: error.message };\n    }\n  };'}],i=()=>(0,n.jsx)(n.Fragment,{children:(0,n.jsxs)("main",{className:"mx-auto w-3/4 bg-white p-6",children:[(0,n.jsx)("h1",{className:"text-2xl font-bold mb-4",children:"How to Store Form Data in a Database Using MongoDB in next.js"}),(0,n.jsx)("p",{className:"mb-2 text-lg font-bold",children:'First Connect MongoDB using below link (file location "/app/db/connectDB.js")'}),(0,n.jsx)("button",{className:" mb-9 bg-green-600 text-white px-4 py-2 rounded mt-2",children:(0,n.jsx)(r.default,{href:"/connection",children:"ConnectDB \xbb"})}),(0,n.jsx)("p",{className:"mb-2 text-lg font-bold",children:'Create Models folder at "/app/models/User.js"'}),(0,n.jsx)("div",{style:{padding:"20px"},children:o.map((e,t)=>(0,n.jsx)("div",{style:{marginBottom:"20px"},children:(0,n.jsx)(s.default,{language:e.language,code:e.code})},t))}),(0,n.jsx)("p",{className:"mb-4  text-lg font-bold",children:'Create a form folder at "/app/AddUser/page.js"'}),(0,n.jsx)("div",{style:{padding:"20px"},children:l.map((e,t)=>(0,n.jsx)("div",{style:{marginBottom:"20px"},children:(0,n.jsx)(s.default,{language:e.language,code:e.code})},t))}),(0,n.jsx)("p",{className:"mb-4 text-lg font-bold",children:'Store data using server action "/app/actions/UserAction.js"'}),(0,n.jsx)("div",{style:{padding:"20px"},children:d.map((e,t)=>(0,n.jsx)("div",{style:{marginBottom:"20px"},children:(0,n.jsx)(s.default,{language:e.language,code:e.code})},t))})]})})},91922:(e,t,a)=>{"use strict";a.d(t,{default:()=>m});var n=a(95155);a(12115);var r=a(43104),s=a(95403),o=a(19250),l=a(30648);let d={position:"absolute",top:"10px",right:"10px",border:"none",padding:"5px 10px",cursor:"pointer",zIndex:1},i=e=>{let{code:t}=e;return(0,n.jsxs)("button",{onClick:()=>{navigator.clipboard.writeText(t),alert("Code copied to clipboard!")},style:d,children:[" ",(0,n.jsx)(l.kn0,{size:20})," Copy"]})};["javascript","python","cpp","java","html","css","tailwindcss"].forEach(e=>{s[e]&&r.A.registerLanguage(e,s[e])});let m=e=>{let{language:t,code:a}=e;return(0,n.jsxs)("div",{style:{position:"relative",padding:"20px",fontSize:"18px",border:"2px solid #ddd",borderRadius:"5px"},children:[(0,n.jsx)(i,{code:a}),(0,n.jsx)(r.A,{language:t,style:o.A,children:a})]})}}},e=>{var t=t=>e(e.s=t);e.O(0,[479,281,396,441,517,358],()=>t(24352)),_N_E=e.O()}]);